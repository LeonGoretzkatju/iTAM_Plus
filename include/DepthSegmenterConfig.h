//#line 2 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the depth_segmentation package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __depth_segmentation__DEPTHSEGMENTERCONFIG_H__
#define __depth_segmentation__DEPTHSEGMENTERCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace ORB_SLAM2
{
  class DepthSegmenterConfigStatics;

  class DepthSegmenterConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(DepthSegmenterConfig &config, const DepthSegmenterConfig &max, const DepthSegmenterConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const DepthSegmenterConfig &config1, const DepthSegmenterConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, DepthSegmenterConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const DepthSegmenterConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, DepthSegmenterConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const DepthSegmenterConfig &config) const = 0;
      virtual void getValue(const DepthSegmenterConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T DepthSegmenterConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T DepthSegmenterConfig::* field;

      virtual void clamp(DepthSegmenterConfig &config, const DepthSegmenterConfig &max, const DepthSegmenterConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const DepthSegmenterConfig &config1, const DepthSegmenterConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, DepthSegmenterConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const DepthSegmenterConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, DepthSegmenterConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const DepthSegmenterConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const DepthSegmenterConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, DepthSegmenterConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, DepthSegmenterConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<DepthSegmenterConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(DepthSegmenterConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class GENERAL_PARAMS
{
  public:
    GENERAL_PARAMS()
    {
      state = true;
      name = "general_params";
    }

    void setParams(DepthSegmenterConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("dilate_depth_image"==(*_i)->name){dilate_depth_image = boost::any_cast<bool>(val);}
        if("dilation_size"==(*_i)->name){dilation_size = boost::any_cast<int>(val);}
      }
    }

    bool dilate_depth_image;
int dilation_size;

    bool state;
    std::string name;

    
}general_params;

class SURFACE_NORMAL
{
  public:
    SURFACE_NORMAL()
    {
      state = true;
      name = "surface_normal";
    }

    void setParams(DepthSegmenterConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("normals_method"==(*_i)->name){normals_method = boost::any_cast<int>(val);}
        if("normals_distance_factor_threshold"==(*_i)->name){normals_distance_factor_threshold = boost::any_cast<double>(val);}
        if("normals_window_size"==(*_i)->name){normals_window_size = boost::any_cast<int>(val);}
        if("normals_display"==(*_i)->name){normals_display = boost::any_cast<bool>(val);}
      }
    }

    int normals_method;
double normals_distance_factor_threshold;
int normals_window_size;
bool normals_display;

    bool state;
    std::string name;

    
}surface_normal;

class DEPTH_DISCONTINUITY
{
  public:
    DEPTH_DISCONTINUITY()
    {
      state = true;
      name = "depth_discontinuity";
    }

    void setParams(DepthSegmenterConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("depth_discontinuity_use_depth_discontinuity"==(*_i)->name){depth_discontinuity_use_depth_discontinuity = boost::any_cast<bool>(val);}
        if("depth_discontinuity_kernel_size"==(*_i)->name){depth_discontinuity_kernel_size = boost::any_cast<int>(val);}
        if("depth_discontinuity_ratio"==(*_i)->name){depth_discontinuity_ratio = boost::any_cast<double>(val);}
        if("depth_discontinuity_display"==(*_i)->name){depth_discontinuity_display = boost::any_cast<bool>(val);}
      }
    }

    bool depth_discontinuity_use_depth_discontinuity;
int depth_discontinuity_kernel_size;
double depth_discontinuity_ratio;
bool depth_discontinuity_display;

    bool state;
    std::string name;

    
}depth_discontinuity;

class MAX_DISTANCE
{
  public:
    MAX_DISTANCE()
    {
      state = true;
      name = "max_distance";
    }

    void setParams(DepthSegmenterConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("max_distance_use_max_distance"==(*_i)->name){max_distance_use_max_distance = boost::any_cast<bool>(val);}
        if("max_distance_window_size"==(*_i)->name){max_distance_window_size = boost::any_cast<int>(val);}
        if("max_distance_exclude_nan_as_max_distance"==(*_i)->name){max_distance_exclude_nan_as_max_distance = boost::any_cast<bool>(val);}
        if("max_distance_ignore_nan_coordinates"==(*_i)->name){max_distance_ignore_nan_coordinates = boost::any_cast<bool>(val);}
        if("max_distance_use_threshold"==(*_i)->name){max_distance_use_threshold = boost::any_cast<bool>(val);}
        if("max_distance_noise_thresholding_factor"==(*_i)->name){max_distance_noise_thresholding_factor = boost::any_cast<double>(val);}
        if("max_distance_sensor_noise_param_1st_order"==(*_i)->name){max_distance_sensor_noise_param_1st_order = boost::any_cast<double>(val);}
        if("max_distance_sensor_noise_param_2nd_order"==(*_i)->name){max_distance_sensor_noise_param_2nd_order = boost::any_cast<double>(val);}
        if("max_distance_sensor_noise_param_3rd_order"==(*_i)->name){max_distance_sensor_noise_param_3rd_order = boost::any_cast<double>(val);}
        if("max_distance_sensor_min_distance"==(*_i)->name){max_distance_sensor_min_distance = boost::any_cast<double>(val);}
        if("max_distance_display"==(*_i)->name){max_distance_display = boost::any_cast<bool>(val);}
      }
    }

    bool max_distance_use_max_distance;
int max_distance_window_size;
bool max_distance_exclude_nan_as_max_distance;
bool max_distance_ignore_nan_coordinates;
bool max_distance_use_threshold;
double max_distance_noise_thresholding_factor;
double max_distance_sensor_noise_param_1st_order;
double max_distance_sensor_noise_param_2nd_order;
double max_distance_sensor_noise_param_3rd_order;
double max_distance_sensor_min_distance;
bool max_distance_display;

    bool state;
    std::string name;

    
}max_distance;

class MIN_CONVEXITY
{
  public:
    MIN_CONVEXITY()
    {
      state = true;
      name = "min_convexity";
    }

    void setParams(DepthSegmenterConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("min_convexity_use_min_convexity"==(*_i)->name){min_convexity_use_min_convexity = boost::any_cast<bool>(val);}
        if("min_convexity_window_size"==(*_i)->name){min_convexity_window_size = boost::any_cast<int>(val);}
        if("min_convexity_use_morphological_opening"==(*_i)->name){min_convexity_use_morphological_opening = boost::any_cast<bool>(val);}
        if("min_convexity_morphological_opening_size"==(*_i)->name){min_convexity_morphological_opening_size = boost::any_cast<int>(val);}
        if("min_convexity_use_threshold"==(*_i)->name){min_convexity_use_threshold = boost::any_cast<bool>(val);}
        if("min_convexity_step_size"==(*_i)->name){min_convexity_step_size = boost::any_cast<int>(val);}
        if("min_convexity_threshold"==(*_i)->name){min_convexity_threshold = boost::any_cast<double>(val);}
        if("min_convexity_mask_threshold"==(*_i)->name){min_convexity_mask_threshold = boost::any_cast<double>(val);}
        if("min_convexity_display"==(*_i)->name){min_convexity_display = boost::any_cast<bool>(val);}
      }
    }

    bool min_convexity_use_min_convexity;
int min_convexity_window_size;
bool min_convexity_use_morphological_opening;
int min_convexity_morphological_opening_size;
bool min_convexity_use_threshold;
int min_convexity_step_size;
double min_convexity_threshold;
double min_convexity_mask_threshold;
bool min_convexity_display;

    bool state;
    std::string name;

    
}min_convexity;

class FINAL_EDGE
{
  public:
    FINAL_EDGE()
    {
      state = true;
      name = "final_edge";
    }

    void setParams(DepthSegmenterConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("final_edge_use_morphological_opening"==(*_i)->name){final_edge_use_morphological_opening = boost::any_cast<bool>(val);}
        if("final_edge_morphological_opening_size"==(*_i)->name){final_edge_morphological_opening_size = boost::any_cast<int>(val);}
        if("final_edge_use_morphological_closing"==(*_i)->name){final_edge_use_morphological_closing = boost::any_cast<bool>(val);}
        if("final_edge_morphological_closing_size"==(*_i)->name){final_edge_morphological_closing_size = boost::any_cast<int>(val);}
        if("final_edge_display"==(*_i)->name){final_edge_display = boost::any_cast<bool>(val);}
      }
    }

    bool final_edge_use_morphological_opening;
int final_edge_morphological_opening_size;
bool final_edge_use_morphological_closing;
int final_edge_morphological_closing_size;
bool final_edge_display;

    bool state;
    std::string name;

    
}final_edge;

class LABEL
{
  public:
    LABEL()
    {
      state = true;
      name = "label";
    }

    void setParams(DepthSegmenterConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("label_method"==(*_i)->name){label_method = boost::any_cast<int>(val);}
        if("label_min_size"==(*_i)->name){label_min_size = boost::any_cast<int>(val);}
        if("label_use_inpaint"==(*_i)->name){label_use_inpaint = boost::any_cast<bool>(val);}
        if("label_inpaint_method"==(*_i)->name){label_inpaint_method = boost::any_cast<int>(val);}
        if("label_display"==(*_i)->name){label_display = boost::any_cast<bool>(val);}
      }
    }

    int label_method;
int label_min_size;
bool label_use_inpaint;
int label_inpaint_method;
bool label_display;

    bool state;
    std::string name;

    
}label;

}groups;



//#line 11 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool dilate_depth_image;
//#line 14 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      int dilation_size;
//#line 21 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      int normals_method;
//#line 26 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      double normals_distance_factor_threshold;
//#line 28 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      int normals_window_size;
//#line 30 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool normals_display;
//#line 35 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool depth_discontinuity_use_depth_discontinuity;
//#line 37 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      int depth_discontinuity_kernel_size;
//#line 41 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      double depth_discontinuity_ratio;
//#line 43 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool depth_discontinuity_display;
//#line 48 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool max_distance_use_max_distance;
//#line 50 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      int max_distance_window_size;
//#line 52 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool max_distance_exclude_nan_as_max_distance;
//#line 56 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool max_distance_ignore_nan_coordinates;
//#line 59 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool max_distance_use_threshold;
//#line 63 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      double max_distance_noise_thresholding_factor;
//#line 65 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      double max_distance_sensor_noise_param_1st_order;
//#line 67 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      double max_distance_sensor_noise_param_2nd_order;
//#line 69 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      double max_distance_sensor_noise_param_3rd_order;
//#line 71 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      double max_distance_sensor_min_distance;
//#line 73 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool max_distance_display;
//#line 78 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool min_convexity_use_min_convexity;
//#line 80 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      int min_convexity_window_size;
//#line 82 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool min_convexity_use_morphological_opening;
//#line 84 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      int min_convexity_morphological_opening_size;
//#line 87 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool min_convexity_use_threshold;
//#line 89 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      int min_convexity_step_size;
//#line 91 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      double min_convexity_threshold;
//#line 93 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      double min_convexity_mask_threshold;
//#line 95 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool min_convexity_display;
//#line 100 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool final_edge_use_morphological_opening;
//#line 102 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      int final_edge_morphological_opening_size;
//#line 104 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool final_edge_use_morphological_closing;
//#line 106 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      int final_edge_morphological_closing_size;
//#line 108 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool final_edge_display;
//#line 113 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      int label_method;
//#line 115 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      int label_min_size;
//#line 116 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool label_use_inpaint;
//#line 118 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      int label_inpaint_method;
//#line 119 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      bool label_display;
//#line 228 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("DepthSegmenterConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const DepthSegmenterConfig &__max__ = __getMax__();
      const DepthSegmenterConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const DepthSegmenterConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const DepthSegmenterConfig &__getDefault__();
    static const DepthSegmenterConfig &__getMax__();
    static const DepthSegmenterConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const DepthSegmenterConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void DepthSegmenterConfig::ParamDescription<std::string>::clamp(DepthSegmenterConfig &config, const DepthSegmenterConfig &max, const DepthSegmenterConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class DepthSegmenterConfigStatics
  {
    friend class DepthSegmenterConfig;

    DepthSegmenterConfigStatics()
    {
DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT, DepthSegmenterConfig> Default("Default", "", 0, 0, true, &DepthSegmenterConfig::groups);
DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::GENERAL_PARAMS, DepthSegmenterConfig::DEFAULT> general_params("general_params", "", 0, 1, true, &DepthSegmenterConfig::DEFAULT::general_params);
//#line 11 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.dilate_depth_image = 0;
//#line 11 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.dilate_depth_image = 1;
//#line 11 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.dilate_depth_image = 0;
//#line 11 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      general_params.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("dilate_depth_image", "bool", 0, "Dilate the registered depth image.", "", &DepthSegmenterConfig::dilate_depth_image)));
//#line 11 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("dilate_depth_image", "bool", 0, "Dilate the registered depth image.", "", &DepthSegmenterConfig::dilate_depth_image)));
//#line 14 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.dilation_size = 1;
//#line 14 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.dilation_size = 15;
//#line 14 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.dilation_size = 1;
//#line 14 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      general_params.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("dilation_size", "int", 0, "Size of the dilation for the registered depth image.", "", &DepthSegmenterConfig::dilation_size)));
//#line 14 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("dilation_size", "int", 0, "Size of the dilation for the registered depth image.", "", &DepthSegmenterConfig::dilation_size)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      general_params.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(DepthSegmenterConfig::AbstractGroupDescriptionConstPtr(new DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::GENERAL_PARAMS, DepthSegmenterConfig::DEFAULT>(general_params)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(DepthSegmenterConfig::AbstractGroupDescriptionConstPtr(new DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::GENERAL_PARAMS, DepthSegmenterConfig::DEFAULT>(general_params)));
DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::SURFACE_NORMAL, DepthSegmenterConfig::DEFAULT> surface_normal("surface_normal", "", 0, 2, true, &DepthSegmenterConfig::DEFAULT::surface_normal);
//#line 21 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.normals_method = 0;
//#line 21 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.normals_method = 3;
//#line 21 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.normals_method = 3;
//#line 21 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      surface_normal.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("normals_method", "int", 0, "Normal estimation Method (0: Fals, 1: Linemod, 2: Sri, 3: DepthWindowFilter)", "", &DepthSegmenterConfig::normals_method)));
//#line 21 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("normals_method", "int", 0, "Normal estimation Method (0: Fals, 1: Linemod, 2: Sri, 3: DepthWindowFilter)", "", &DepthSegmenterConfig::normals_method)));
//#line 26 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.normals_distance_factor_threshold = 0.0;
//#line 26 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.normals_distance_factor_threshold = 1.0;
//#line 26 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.normals_distance_factor_threshold = 0.05;
//#line 26 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      surface_normal.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("normals_distance_factor_threshold", "double", 0, "Maximal Euclidean distance factor (depending on the midpoint distance to the camera) for a point to be considered in the neighborhood.", "", &DepthSegmenterConfig::normals_distance_factor_threshold)));
//#line 26 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("normals_distance_factor_threshold", "double", 0, "Maximal Euclidean distance factor (depending on the midpoint distance to the camera) for a point to be considered in the neighborhood.", "", &DepthSegmenterConfig::normals_distance_factor_threshold)));
//#line 28 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.normals_window_size = 3;
//#line 28 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.normals_window_size = 31;
//#line 28 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.normals_window_size = 13;
//#line 28 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      surface_normal.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("normals_window_size", "int", 0, "The window size for the neighborhood.", "", &DepthSegmenterConfig::normals_window_size)));
//#line 28 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("normals_window_size", "int", 0, "The window size for the neighborhood.", "", &DepthSegmenterConfig::normals_window_size)));
//#line 30 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.normals_display = 0;
//#line 30 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.normals_display = 1;
//#line 30 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.normals_display = 0;
//#line 30 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      surface_normal.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("normals_display", "bool", 0, "Display the estimated normals.", "", &DepthSegmenterConfig::normals_display)));
//#line 30 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("normals_display", "bool", 0, "Display the estimated normals.", "", &DepthSegmenterConfig::normals_display)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      surface_normal.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(DepthSegmenterConfig::AbstractGroupDescriptionConstPtr(new DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::SURFACE_NORMAL, DepthSegmenterConfig::DEFAULT>(surface_normal)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(DepthSegmenterConfig::AbstractGroupDescriptionConstPtr(new DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::SURFACE_NORMAL, DepthSegmenterConfig::DEFAULT>(surface_normal)));
DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::DEPTH_DISCONTINUITY, DepthSegmenterConfig::DEFAULT> depth_discontinuity("depth_discontinuity", "", 0, 3, true, &DepthSegmenterConfig::DEFAULT::depth_discontinuity);
//#line 35 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.depth_discontinuity_use_depth_discontinuity = 0;
//#line 35 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.depth_discontinuity_use_depth_discontinuity = 1;
//#line 35 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.depth_discontinuity_use_depth_discontinuity = 1;
//#line 35 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      depth_discontinuity.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("depth_discontinuity_use_depth_discontinuity", "bool", 0, "Use depth discontinuity map.", "", &DepthSegmenterConfig::depth_discontinuity_use_depth_discontinuity)));
//#line 35 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("depth_discontinuity_use_depth_discontinuity", "bool", 0, "Use depth discontinuity map.", "", &DepthSegmenterConfig::depth_discontinuity_use_depth_discontinuity)));
//#line 37 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.depth_discontinuity_kernel_size = 1;
//#line 37 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.depth_discontinuity_kernel_size = 25;
//#line 37 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.depth_discontinuity_kernel_size = 3;
//#line 37 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      depth_discontinuity.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("depth_discontinuity_kernel_size", "int", 0, "The kernel size for the neighborhood.", "", &DepthSegmenterConfig::depth_discontinuity_kernel_size)));
//#line 37 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("depth_discontinuity_kernel_size", "int", 0, "The kernel size for the neighborhood.", "", &DepthSegmenterConfig::depth_discontinuity_kernel_size)));
//#line 41 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.depth_discontinuity_ratio = 0.0;
//#line 41 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.depth_discontinuity_ratio = 5.0;
//#line 41 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.depth_discontinuity_ratio = 0.01;
//#line 41 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      depth_discontinuity.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("depth_discontinuity_ratio", "double", 0, "Ratio between maximum local Euclidean distance and original depth for a point to be considered as depth discontinuity.", "", &DepthSegmenterConfig::depth_discontinuity_ratio)));
//#line 41 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("depth_discontinuity_ratio", "double", 0, "Ratio between maximum local Euclidean distance and original depth for a point to be considered as depth discontinuity.", "", &DepthSegmenterConfig::depth_discontinuity_ratio)));
//#line 43 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.depth_discontinuity_display = 0;
//#line 43 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.depth_discontinuity_display = 1;
//#line 43 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.depth_discontinuity_display = 0;
//#line 43 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      depth_discontinuity.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("depth_discontinuity_display", "bool", 0, "Display the depth discontinuity map.", "", &DepthSegmenterConfig::depth_discontinuity_display)));
//#line 43 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("depth_discontinuity_display", "bool", 0, "Display the depth discontinuity map.", "", &DepthSegmenterConfig::depth_discontinuity_display)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      depth_discontinuity.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(DepthSegmenterConfig::AbstractGroupDescriptionConstPtr(new DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::DEPTH_DISCONTINUITY, DepthSegmenterConfig::DEFAULT>(depth_discontinuity)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(DepthSegmenterConfig::AbstractGroupDescriptionConstPtr(new DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::DEPTH_DISCONTINUITY, DepthSegmenterConfig::DEFAULT>(depth_discontinuity)));
DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::MAX_DISTANCE, DepthSegmenterConfig::DEFAULT> max_distance("max_distance", "", 0, 4, true, &DepthSegmenterConfig::DEFAULT::max_distance);
//#line 48 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.max_distance_use_max_distance = 0;
//#line 48 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.max_distance_use_max_distance = 1;
//#line 48 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.max_distance_use_max_distance = 1;
//#line 48 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      max_distance.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("max_distance_use_max_distance", "bool", 0, "Use max distance map.", "", &DepthSegmenterConfig::max_distance_use_max_distance)));
//#line 48 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("max_distance_use_max_distance", "bool", 0, "Use max distance map.", "", &DepthSegmenterConfig::max_distance_use_max_distance)));
//#line 50 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.max_distance_window_size = 1;
//#line 50 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.max_distance_window_size = 9;
//#line 50 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.max_distance_window_size = 1;
//#line 50 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      max_distance.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("max_distance_window_size", "int", 0, "The window size for the neighborhood.", "", &DepthSegmenterConfig::max_distance_window_size)));
//#line 50 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("max_distance_window_size", "int", 0, "The window size for the neighborhood.", "", &DepthSegmenterConfig::max_distance_window_size)));
//#line 52 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.max_distance_exclude_nan_as_max_distance = 0;
//#line 52 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.max_distance_exclude_nan_as_max_distance = 1;
//#line 52 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.max_distance_exclude_nan_as_max_distance = 0;
//#line 52 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      max_distance.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("max_distance_exclude_nan_as_max_distance", "bool", 0, "Exclude nans as max distances.", "", &DepthSegmenterConfig::max_distance_exclude_nan_as_max_distance)));
//#line 52 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("max_distance_exclude_nan_as_max_distance", "bool", 0, "Exclude nans as max distances.", "", &DepthSegmenterConfig::max_distance_exclude_nan_as_max_distance)));
//#line 56 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.max_distance_ignore_nan_coordinates = 0;
//#line 56 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.max_distance_ignore_nan_coordinates = 1;
//#line 56 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.max_distance_ignore_nan_coordinates = 0;
//#line 56 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      max_distance.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("max_distance_ignore_nan_coordinates", "bool", 0, "Exclude all values that have at least one nan in them for the max distance calculation.", "", &DepthSegmenterConfig::max_distance_ignore_nan_coordinates)));
//#line 56 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("max_distance_ignore_nan_coordinates", "bool", 0, "Exclude all values that have at least one nan in them for the max distance calculation.", "", &DepthSegmenterConfig::max_distance_ignore_nan_coordinates)));
//#line 59 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.max_distance_use_threshold = 0;
//#line 59 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.max_distance_use_threshold = 1;
//#line 59 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.max_distance_use_threshold = 1;
//#line 59 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      max_distance.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("max_distance_use_threshold", "bool", 0, "Enable a threshold value for the max distance calculation.", "", &DepthSegmenterConfig::max_distance_use_threshold)));
//#line 59 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("max_distance_use_threshold", "bool", 0, "Enable a threshold value for the max distance calculation.", "", &DepthSegmenterConfig::max_distance_use_threshold)));
//#line 63 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.max_distance_noise_thresholding_factor = 0.0;
//#line 63 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.max_distance_noise_thresholding_factor = 30.0;
//#line 63 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.max_distance_noise_thresholding_factor = 10.0;
//#line 63 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      max_distance.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("max_distance_noise_thresholding_factor", "double", 0, "Noise thresholding factor, depending on the midpoint distance.", "", &DepthSegmenterConfig::max_distance_noise_thresholding_factor)));
//#line 63 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("max_distance_noise_thresholding_factor", "double", 0, "Noise thresholding factor, depending on the midpoint distance.", "", &DepthSegmenterConfig::max_distance_noise_thresholding_factor)));
//#line 65 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.max_distance_sensor_noise_param_1st_order = 0.0;
//#line 65 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.max_distance_sensor_noise_param_1st_order = 1.0;
//#line 65 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.max_distance_sensor_noise_param_1st_order = 0.0012;
//#line 65 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      max_distance.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("max_distance_sensor_noise_param_1st_order", "double", 0, "Noise model first order parameter.", "", &DepthSegmenterConfig::max_distance_sensor_noise_param_1st_order)));
//#line 65 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("max_distance_sensor_noise_param_1st_order", "double", 0, "Noise model first order parameter.", "", &DepthSegmenterConfig::max_distance_sensor_noise_param_1st_order)));
//#line 67 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.max_distance_sensor_noise_param_2nd_order = 0.0;
//#line 67 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.max_distance_sensor_noise_param_2nd_order = 1.0;
//#line 67 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.max_distance_sensor_noise_param_2nd_order = 0.0019;
//#line 67 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      max_distance.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("max_distance_sensor_noise_param_2nd_order", "double", 0, "Noise model second order parameter.", "", &DepthSegmenterConfig::max_distance_sensor_noise_param_2nd_order)));
//#line 67 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("max_distance_sensor_noise_param_2nd_order", "double", 0, "Noise model second order parameter.", "", &DepthSegmenterConfig::max_distance_sensor_noise_param_2nd_order)));
//#line 69 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.max_distance_sensor_noise_param_3rd_order = 0.0;
//#line 69 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.max_distance_sensor_noise_param_3rd_order = 1.0;
//#line 69 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.max_distance_sensor_noise_param_3rd_order = 0.0001;
//#line 69 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      max_distance.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("max_distance_sensor_noise_param_3rd_order", "double", 0, "Noise model third order parameter.", "", &DepthSegmenterConfig::max_distance_sensor_noise_param_3rd_order)));
//#line 69 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("max_distance_sensor_noise_param_3rd_order", "double", 0, "Noise model third order parameter.", "", &DepthSegmenterConfig::max_distance_sensor_noise_param_3rd_order)));
//#line 71 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.max_distance_sensor_min_distance = 0.0;
//#line 71 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.max_distance_sensor_min_distance = 1.0;
//#line 71 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.max_distance_sensor_min_distance = 0.02;
//#line 71 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      max_distance.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("max_distance_sensor_min_distance", "double", 0, "Minimal sensor distance.", "", &DepthSegmenterConfig::max_distance_sensor_min_distance)));
//#line 71 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("max_distance_sensor_min_distance", "double", 0, "Minimal sensor distance.", "", &DepthSegmenterConfig::max_distance_sensor_min_distance)));
//#line 73 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.max_distance_display = 0;
//#line 73 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.max_distance_display = 1;
//#line 73 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.max_distance_display = 0;
//#line 73 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      max_distance.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("max_distance_display", "bool", 0, "Display the max distance map.", "", &DepthSegmenterConfig::max_distance_display)));
//#line 73 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("max_distance_display", "bool", 0, "Display the max distance map.", "", &DepthSegmenterConfig::max_distance_display)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      max_distance.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(DepthSegmenterConfig::AbstractGroupDescriptionConstPtr(new DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::MAX_DISTANCE, DepthSegmenterConfig::DEFAULT>(max_distance)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(DepthSegmenterConfig::AbstractGroupDescriptionConstPtr(new DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::MAX_DISTANCE, DepthSegmenterConfig::DEFAULT>(max_distance)));
DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::MIN_CONVEXITY, DepthSegmenterConfig::DEFAULT> min_convexity("min_convexity", "", 0, 5, true, &DepthSegmenterConfig::DEFAULT::min_convexity);
//#line 78 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.min_convexity_use_min_convexity = 0;
//#line 78 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.min_convexity_use_min_convexity = 1;
//#line 78 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.min_convexity_use_min_convexity = 1;
//#line 78 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      min_convexity.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("min_convexity_use_min_convexity", "bool", 0, "Use min convexity map.", "", &DepthSegmenterConfig::min_convexity_use_min_convexity)));
//#line 78 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("min_convexity_use_min_convexity", "bool", 0, "Use min convexity map.", "", &DepthSegmenterConfig::min_convexity_use_min_convexity)));
//#line 80 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.min_convexity_window_size = 1;
//#line 80 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.min_convexity_window_size = 9;
//#line 80 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.min_convexity_window_size = 5;
//#line 80 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      min_convexity.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("min_convexity_window_size", "int", 0, "The window size for the neighborhood.", "", &DepthSegmenterConfig::min_convexity_window_size)));
//#line 80 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("min_convexity_window_size", "int", 0, "The window size for the neighborhood.", "", &DepthSegmenterConfig::min_convexity_window_size)));
//#line 82 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.min_convexity_use_morphological_opening = 0;
//#line 82 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.min_convexity_use_morphological_opening = 1;
//#line 82 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.min_convexity_use_morphological_opening = 1;
//#line 82 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      min_convexity.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("min_convexity_use_morphological_opening", "bool", 0, "Enable the morphological opening filter.", "", &DepthSegmenterConfig::min_convexity_use_morphological_opening)));
//#line 82 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("min_convexity_use_morphological_opening", "bool", 0, "Enable the morphological opening filter.", "", &DepthSegmenterConfig::min_convexity_use_morphological_opening)));
//#line 84 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.min_convexity_morphological_opening_size = 1;
//#line 84 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.min_convexity_morphological_opening_size = 9;
//#line 84 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.min_convexity_morphological_opening_size = 1;
//#line 84 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      min_convexity.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("min_convexity_morphological_opening_size", "int", 0, "Pixel width of the morphological opening filter.", "", &DepthSegmenterConfig::min_convexity_morphological_opening_size)));
//#line 84 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("min_convexity_morphological_opening_size", "int", 0, "Pixel width of the morphological opening filter.", "", &DepthSegmenterConfig::min_convexity_morphological_opening_size)));
//#line 87 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.min_convexity_use_threshold = 0;
//#line 87 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.min_convexity_use_threshold = 1;
//#line 87 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.min_convexity_use_threshold = 1;
//#line 87 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      min_convexity.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("min_convexity_use_threshold", "bool", 0, "Enable a threshold value for the min convexity calculation.", "", &DepthSegmenterConfig::min_convexity_use_threshold)));
//#line 87 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("min_convexity_use_threshold", "bool", 0, "Enable a threshold value for the min convexity calculation.", "", &DepthSegmenterConfig::min_convexity_use_threshold)));
//#line 89 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.min_convexity_step_size = 1;
//#line 89 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.min_convexity_step_size = 9;
//#line 89 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.min_convexity_step_size = 1;
//#line 89 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      min_convexity.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("min_convexity_step_size", "int", 0, "The pixel step size of the min convexity filter.", "", &DepthSegmenterConfig::min_convexity_step_size)));
//#line 89 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("min_convexity_step_size", "int", 0, "The pixel step size of the min convexity filter.", "", &DepthSegmenterConfig::min_convexity_step_size)));
//#line 91 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.min_convexity_threshold = 0.0;
//#line 91 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.min_convexity_threshold = 1.0;
//#line 91 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.min_convexity_threshold = 0.97;
//#line 91 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      min_convexity.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("min_convexity_threshold", "double", 0, "The threshold of what is still convex.", "", &DepthSegmenterConfig::min_convexity_threshold)));
//#line 91 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("min_convexity_threshold", "double", 0, "The threshold of what is still convex.", "", &DepthSegmenterConfig::min_convexity_threshold)));
//#line 93 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.min_convexity_mask_threshold = -0.1;
//#line 93 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.min_convexity_mask_threshold = 0.1;
//#line 93 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.min_convexity_mask_threshold = -0.0005;
//#line 93 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      min_convexity.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("min_convexity_mask_threshold", "double", 0, "The mask threshold for convexity.", "", &DepthSegmenterConfig::min_convexity_mask_threshold)));
//#line 93 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<double>("min_convexity_mask_threshold", "double", 0, "The mask threshold for convexity.", "", &DepthSegmenterConfig::min_convexity_mask_threshold)));
//#line 95 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.min_convexity_display = 0;
//#line 95 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.min_convexity_display = 1;
//#line 95 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.min_convexity_display = 0;
//#line 95 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      min_convexity.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("min_convexity_display", "bool", 0, "Display the min convexity map.", "", &DepthSegmenterConfig::min_convexity_display)));
//#line 95 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("min_convexity_display", "bool", 0, "Display the min convexity map.", "", &DepthSegmenterConfig::min_convexity_display)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      min_convexity.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(DepthSegmenterConfig::AbstractGroupDescriptionConstPtr(new DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::MIN_CONVEXITY, DepthSegmenterConfig::DEFAULT>(min_convexity)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(DepthSegmenterConfig::AbstractGroupDescriptionConstPtr(new DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::MIN_CONVEXITY, DepthSegmenterConfig::DEFAULT>(min_convexity)));
DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::FINAL_EDGE, DepthSegmenterConfig::DEFAULT> final_edge("final_edge", "", 0, 6, true, &DepthSegmenterConfig::DEFAULT::final_edge);
//#line 100 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.final_edge_use_morphological_opening = 0;
//#line 100 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.final_edge_use_morphological_opening = 1;
//#line 100 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.final_edge_use_morphological_opening = 1;
//#line 100 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      final_edge.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("final_edge_use_morphological_opening", "bool", 0, "Enable the morphological opening filter.", "", &DepthSegmenterConfig::final_edge_use_morphological_opening)));
//#line 100 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("final_edge_use_morphological_opening", "bool", 0, "Enable the morphological opening filter.", "", &DepthSegmenterConfig::final_edge_use_morphological_opening)));
//#line 102 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.final_edge_morphological_opening_size = 1;
//#line 102 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.final_edge_morphological_opening_size = 9;
//#line 102 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.final_edge_morphological_opening_size = 1;
//#line 102 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      final_edge.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("final_edge_morphological_opening_size", "int", 0, "Pixel width of the morphological opening filter.", "", &DepthSegmenterConfig::final_edge_morphological_opening_size)));
//#line 102 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("final_edge_morphological_opening_size", "int", 0, "Pixel width of the morphological opening filter.", "", &DepthSegmenterConfig::final_edge_morphological_opening_size)));
//#line 104 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.final_edge_use_morphological_closing = 0;
//#line 104 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.final_edge_use_morphological_closing = 1;
//#line 104 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.final_edge_use_morphological_closing = 1;
//#line 104 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      final_edge.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("final_edge_use_morphological_closing", "bool", 0, "Enable the morphological closing filter.", "", &DepthSegmenterConfig::final_edge_use_morphological_closing)));
//#line 104 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("final_edge_use_morphological_closing", "bool", 0, "Enable the morphological closing filter.", "", &DepthSegmenterConfig::final_edge_use_morphological_closing)));
//#line 106 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.final_edge_morphological_closing_size = 1;
//#line 106 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.final_edge_morphological_closing_size = 9;
//#line 106 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.final_edge_morphological_closing_size = 1;
//#line 106 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      final_edge.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("final_edge_morphological_closing_size", "int", 0, "Pixel width of the morphological closing filter.", "", &DepthSegmenterConfig::final_edge_morphological_closing_size)));
//#line 106 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("final_edge_morphological_closing_size", "int", 0, "Pixel width of the morphological closing filter.", "", &DepthSegmenterConfig::final_edge_morphological_closing_size)));
//#line 108 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.final_edge_display = 0;
//#line 108 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.final_edge_display = 1;
//#line 108 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.final_edge_display = 0;
//#line 108 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      final_edge.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("final_edge_display", "bool", 0, "Display the final edge map.", "", &DepthSegmenterConfig::final_edge_display)));
//#line 108 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("final_edge_display", "bool", 0, "Display the final edge map.", "", &DepthSegmenterConfig::final_edge_display)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      final_edge.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(DepthSegmenterConfig::AbstractGroupDescriptionConstPtr(new DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::FINAL_EDGE, DepthSegmenterConfig::DEFAULT>(final_edge)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(DepthSegmenterConfig::AbstractGroupDescriptionConstPtr(new DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::FINAL_EDGE, DepthSegmenterConfig::DEFAULT>(final_edge)));
DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::LABEL, DepthSegmenterConfig::DEFAULT> label("label", "", 0, 7, true, &DepthSegmenterConfig::DEFAULT::label);
//#line 113 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.label_method = 0;
//#line 113 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.label_method = 1;
//#line 113 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.label_method = 1;
//#line 113 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      label.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("label_method", "int", 0, "The method used to assign the labels.", "", &DepthSegmenterConfig::label_method)));
//#line 113 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("label_method", "int", 0, "The method used to assign the labels.", "", &DepthSegmenterConfig::label_method)));
//#line 115 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.label_min_size = 1;
//#line 115 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.label_min_size = 3000;
//#line 115 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.label_min_size = 500;
//#line 115 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      label.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("label_min_size", "int", 0, "The minimal size of a labeled region.", "", &DepthSegmenterConfig::label_min_size)));
//#line 115 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("label_min_size", "int", 0, "The minimal size of a labeled region.", "", &DepthSegmenterConfig::label_min_size)));
//#line 116 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.label_use_inpaint = 0;
//#line 116 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.label_use_inpaint = 1;
//#line 116 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.label_use_inpaint = 0;
//#line 116 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      label.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("label_use_inpaint", "bool", 0, "Inpaint the label map.", "", &DepthSegmenterConfig::label_use_inpaint)));
//#line 116 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("label_use_inpaint", "bool", 0, "Inpaint the label map.", "", &DepthSegmenterConfig::label_use_inpaint)));
//#line 118 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.label_inpaint_method = 0;
//#line 118 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.label_inpaint_method = 1;
//#line 118 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.label_inpaint_method = 0;
//#line 118 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      label.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("label_inpaint_method", "int", 0, "Inpaint Method (0: Navier Stokes, 1: Telea).", "", &DepthSegmenterConfig::label_inpaint_method)));
//#line 118 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<int>("label_inpaint_method", "int", 0, "Inpaint Method (0: Navier Stokes, 1: Telea).", "", &DepthSegmenterConfig::label_inpaint_method)));
//#line 119 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __min__.label_display = 0;
//#line 119 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __max__.label_display = 1;
//#line 119 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __default__.label_display = 1;
//#line 119 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      label.abstract_parameters.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("label_display", "bool", 0, "Display the label map.", "", &DepthSegmenterConfig::label_display)));
//#line 119 "/home/yanyan/catkin_ws/src/depth_segmentation/depth_segmentation/cfg/DepthSegmenter.cfg"
      __param_descriptions__.push_back(DepthSegmenterConfig::AbstractParamDescriptionConstPtr(new DepthSegmenterConfig::ParamDescription<bool>("label_display", "bool", 0, "Display the label map.", "", &DepthSegmenterConfig::label_display)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      label.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(DepthSegmenterConfig::AbstractGroupDescriptionConstPtr(new DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::LABEL, DepthSegmenterConfig::DEFAULT>(label)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(DepthSegmenterConfig::AbstractGroupDescriptionConstPtr(new DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT::LABEL, DepthSegmenterConfig::DEFAULT>(label)));
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(DepthSegmenterConfig::AbstractGroupDescriptionConstPtr(new DepthSegmenterConfig::GroupDescription<DepthSegmenterConfig::DEFAULT, DepthSegmenterConfig>(Default)));
//#line 366 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<DepthSegmenterConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<DepthSegmenterConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<DepthSegmenterConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    DepthSegmenterConfig __max__;
    DepthSegmenterConfig __min__;
    DepthSegmenterConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const DepthSegmenterConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static DepthSegmenterConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &DepthSegmenterConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const DepthSegmenterConfig &DepthSegmenterConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const DepthSegmenterConfig &DepthSegmenterConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const DepthSegmenterConfig &DepthSegmenterConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<DepthSegmenterConfig::AbstractParamDescriptionConstPtr> &DepthSegmenterConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<DepthSegmenterConfig::AbstractGroupDescriptionConstPtr> &DepthSegmenterConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const DepthSegmenterConfigStatics *DepthSegmenterConfig::__get_statics__()
  {
    const static DepthSegmenterConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = DepthSegmenterConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __DEPTHSEGMENTERRECONFIGURATOR_H__
